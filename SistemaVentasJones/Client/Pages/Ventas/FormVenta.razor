@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Microsoft.JSInterop;
@using System.Threading;
@inject IJSRuntime JSRuntime

<EditForm Model="@venta" OnValidSubmit="OnValidSubmit">
    <div class="form-field mt-2 mb-2">
        <div class="form-group row" hidden="@ocultaclientes">
            <label class="col-3 col-form-label">Cliente</label>
            <div class="col">
                <div class="input-group">

                    <InputSelect @bind-Value="venta.ClienteId" class="form-control select2">
                        <option selected value="0">Seleccione cliente</option>
                        @foreach (var cliente in clientes)
                        {
                            <option value="@cliente.Id">@cliente.Nombre | Cédula:@cliente.Cedula</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => venta.ClienteId)" />
            </div>
        </div>
        
        <!-- ... (código anterior) ... -->
        <div class="btn-group  mb-3">
            <button type="button" class="btn btn-success" style="margin-: 10px;"
            @onclick="@(() => venta.DetalleVentas.Add(new DetalleVenta()))">
                Agregar detalle
            </button>
        </div>

<div class="form-group">
    <table class="table">
        <thead>
            <tr>
                <th>Artículo</th>
                <th>Cantidad</th>
                <th>Descuento %</th>
                <th>Subtotal</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < venta.DetalleVentas.Count; i++)
            {
                var indice = i;
                var detalle = venta.DetalleVentas[i];
                listadetalle = venta.DetalleVentas;

                <tr>
                    <td>
                        <InputSelect @bind-Value="detalle.ArticuloId" required class="form-control">
                                <option selected value="">Seleccione un artículo</option>
                                @foreach (var articulo in articulos)
                                {
                                    if (articulo.StockActual > 0)
                                    {
                                        <option value="@articulo.Id">@articulo.Nombre | C$ @articulo.PrecioUnitario | STOCK: @articulo.StockActual</option>
                                    }
                                }
                            </InputSelect>                            
                            <ValidationMessage For="@(() => detalle.ArticuloId)" />
                            
                            @foreach (var art in articulos)
                                {
                                    if (detalle.ArticuloId == art.Id)
                                    {
                                        cantidadmax = art.StockActual;
                                        detalle.Precio = art.PrecioUnitario;
                                    }
                                }
                    </td>
                    <td>
                        <MudNumericField @bind-Value="detalle.Cantidad" Label="Ingrese la cantidad" Variant="Variant.Outlined"
                                         Min="1" Max="@cantidadmax" Step="1" />
                            <ValidationMessage For="@(() => detalle.Cantidad)" />
                    </td>
                    <td>
                        <MudNumericField @bind-Value="detalle.Descuento" Label="Ingrese el descuento en % por producto" Variant="Variant.Outlined"
                                         Min="0" Max="100" Step="5" />
                            <ValidationMessage For="@(() => detalle.Descuento)" />
                    </td>
                    <td>
                       C$ @Math.Round(detalle.SubTotal,2)
                    </td>
                    <td>
                        <button type="button" @onclick="@(() => venta.DetalleVentas.RemoveAt(indice))" class="btn btn-danger btn-sm" style="border-radius:10px">
                                    <i class="oi oi-trash"></i><text style="color:white">Quitar ítem @(indice + 1)</text>
                                </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



        <div class="d-flex justify-content-end py-2">
            <button @onclick="@(() => CalcularTotal())" type="button" class="" style="border:none">
                <h3><b>TOTAL: <br></b></h3>
                @if (venta.Total != 0)
                {
                    <h2><b><br>C$ @Math.Round(venta.Total, 2)</b></h2>
                }
            </button>
        </div>

        



        <div class="btn-group btn-block">
            <button @onclick="@(() => CalcularTotal())" type="submit" class="btn btn-success"><i class="oi oi-check"></i><text style="color:white"> @textSubmit</text></button>
            <button @onclick="@Volver" class="btn btn-danger"><i class="oi oi-x"></i><text style="color:white"> Cancelar y volver atrás</text></button>
        </div>
        </div>

    <DataAnnotationsValidator />
</EditForm>

@code {
    [Parameter] public Venta venta { get; set; } = new Venta();
    [Parameter] public DetalleVenta detalleVentas { get; set; } = new DetalleVenta();
    [Parameter] public List<Cliente> clientes { get; set; } = new List<Cliente>();
    [Parameter] public List<Articulo> articulos { get; set; } = new List<Articulo>();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public string textSubmit { get; set; }

    bool IsFormaPagoSelected(FormasPago fpago) => venta.FormaPago == fpago;

    void HandleFormaPagoChange(FormasPago selectedFormaPago)
    {
        venta.FormaPago = selectedFormaPago;
    }

    public decimal Iva = 15M / 100M;

    public bool ocultaclientes = false;

    public List<DetalleVenta> listadetalle { get; set; } = new List<DetalleVenta>();

    public int cantidadmax { get; set; } //cantidad maxima de un articulo por su stock
    private decimal cantidadPagada = 0;
    private decimal Cambio = 0;

   

    decimal CalcularTotal()
    {
        venta.Total = 0;

        if (listadetalle.Count > 0)
        {
            for (int i = 0; i < listadetalle.Count; i++)
            {
                venta.Total += listadetalle[i].TotalFinal;
            }
        }

        // Calcular vuelto (si se ha ingresado una cantidad pagada)
        if (cantidadPagada > 0)
        {
            Cambio = cantidadPagada - venta.Total;
        }


        return venta.Total;
    }
    public void CalcularVuelto()
    {
        Cambio = venta.CantidadPagada - venta.Total;
    }


    void Volver()
    {
        NavigationManager.NavigateTo("/lista-ventas");
    }
}