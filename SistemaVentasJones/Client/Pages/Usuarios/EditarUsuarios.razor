@page "/editar-usuarios/{idUsuarios}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "admin")]

<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar Usuario</b></h3>
</div>

<FormularioUsuarios TextBotonSubmit="Guardar cambios" OnValidSubmit="@EditarUsuario" applicationUser="@applicationUser" />
@code {
    ApplicationUser applicationUser = new ApplicationUser();
    [Parameter] public string idUsuarios { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (!Guid.TryParse(idUsuarios, out Guid userId))
        {
            // Manejar el caso cuando el valor proporcionado no es un GUID válido
            // Esto podría ser un manejo de error o redireccionamiento a una página de error
            return;
        }

        applicationUser = await Http.GetFromJsonAsync<ApplicationUser>($"/api/usuarios/{userId}");
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-usuarios");
    }

    async Task EditarUsuario()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {applicationUser.NombreyApellido}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync($"/api/usuarios/{idUsuarios}", applicationUser);

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-usuarios");
                Snackbar.Add("Editado con éxito", Severity.Success,
                a => a.VisibleStateDuration = 200);
            }
            else
            {
                Snackbar.Add("Ha ocurrido un error al editar el usuario", Severity.Error);
            }
        }
    }
}
